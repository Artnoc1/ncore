#include <iterator>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <queue>

#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <cxxtest/TestSuite.h>

#include <Logger.h>
#include <SketchThread.h>
#include <OutputCapture.h>

using namespace std;

Logger global_logger;

extern ostream& operator<<(ostream& os, const Logger& log);

void custom_thread_main(void);

class SketchThreadTestSuite: public CxxTest::TestSuite
{
  class InheritedSketchThread: public SketchThread
  {
  private:
    int reps;
  protected:
    virtual void internal_setup(void) 
    {
      reps = 10;
    }
    virtual bool internal_loop(void) 
    {
      bool result = true;

      if (reps--)
	global_logger.add("internal_loop");
      else
	result = false;

      return result;
    }
  public:
    InheritedSketchThread(void): SketchThread(2)
    {
    }
  };
  class DCSketchThread: public SketchThread
  {
  private:
    ThreadDeconflict& decon;
    int id;
  protected:
    virtual bool internal_loop(void) 
    {
      int next_id = id + 1;
      if ( next_id > 3 )
	next_id = 0;
     
      decon.wait(id);
      cout << id << " -> " << next_id << endl;
      decon.yieldTo(next_id);
      decon.wait(id);
      cout << id << " -> " << next_id << endl;
      decon.yieldTo(next_id);

      return false;
    }
  public:
    DCSketchThread(ThreadDeconflict& _decon, int _id): SketchThread(2), decon(_decon), id(_id)
    {
    }
  };
public:
  void setUp()
  {
    global_logger.clear();
  }
  void testInheritedThread( void )
  {
    InheritedSketchThread t;
    t.waitToFinish();
    TS_ASSERT_EQUALS( global_logger.lines_contain("internal_loop"), 10 );
  }
  void testThread( void )
  {
    SketchThread t;
    t.waitToFinish();

    TS_ASSERT_EQUALS( global_logger.lines_contain("setup"), 1 );
    TS_ASSERT_EQUALS( global_logger.lines_contain("loop"), 10 );
  }
  void testCustom( void )
  {
    SketchThread t(1);
    t.startCustom(custom_thread_main);
    t.waitToFinish();

    TS_ASSERT_EQUALS( global_logger.lines_contain("custom"), 5 );
  }
  const char* message(void)
  {
    return "custom data";
  }
  static void custom_thread_wdata_main(void* pv)
  {
    SketchThreadTestSuite* pts = reinterpret_cast<SketchThreadTestSuite*>(pv);

    int i=5;
    while(i--)
      global_logger.add(pts->message());
  }
  void testCustomWithData( void )
  {
    SketchThread t(1);
    t.startCustom(custom_thread_wdata_main,this);
    t.waitToFinish();

    TS_ASSERT_EQUALS( global_logger.lines_contain("custom data"), 5 );
  }
  static void empty(void*)
  {
  }
  void testExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( SketchThread(-1) );
    TS_ASSERT_THROWS_ANYTHING( SketchThread(1).startCustom(NULL) );
    TS_ASSERT_THROWS_ANYTHING( SketchThread(1).startCustom(NULL,NULL) );
    TS_ASSERT_THROWS_ANYTHING( SketchThread(1).startCustom(SketchThreadTestSuite::empty,NULL) );
  }
  void testExceptions3( void )
  {
    SketchThread t(0);
    TS_ASSERT_THROWS_ANYTHING(t.startCustom(custom_thread_main); );
    t.waitToFinish();
  }
  void testExceptions4( void )
  {
    SketchThread t(0);
    TS_ASSERT_THROWS_ANYTHING(t.startCustom(empty,this); );
    t.waitToFinish();
  }
  void testDeconflict( void )
  {
    OutputCapture cap;
    cap.clear();
    cap.start();
    ThreadDeconflict decon;
    cout << endl << "0 -> 1" << endl;
    
    DCSketchThread t1(decon,1);
    DCSketchThread t2(decon,2);
    DCSketchThread t3(decon,3);

    decon.yieldTo(1);
    decon.wait(0);
    cout << "0 -> 1" << endl;
    decon.yieldTo(1);
    decon.wait(0);
    cout << "0 done" << endl;
    t1.waitToFinish();
    t2.waitToFinish();
    t3.waitToFinish();
    
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("->") , 8);
    TS_ASSERT_EQUALS( cap.contains("0"), 5);
  }
};

static volatile int i;

extern "C" void setup(void)
{
  i = 10;
  global_logger.add("setup");
}

extern "C" void loop(void)
{
  if (i--)
    global_logger.add("loop");
  else
    pthread_exit(NULL);
}

void custom_thread_main(void)
{
  int i=5;
  while(i--)
    global_logger.add("custom");
}

// vim:cin:ai:sts=2 sw=2 ft=cpp
