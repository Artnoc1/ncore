CXXTEST_DIR	= $(HOME)/Source/cxxtest ;
INTERNAL_DIR	= ../internal ;
CORE_DIR	= .. ;
EXTRAS_DIR	= $(CORE_DIR)/extras ;

HDRS		+= $(CXXTEST_DIR) $(PWD) $(INTERNAL_DIR) $(CORE_DIR) ;
DEFINES		+= NATIVE=1 ;

CORE_MODULES	= [ GLOB $(CORE_DIR) : *.cpp ] ; 
INTERNAL_MODULES = [ GLOB $(INTERNAL_DIR) : *.cpp ] ;
TEST_MODULES	= [ GLOB $(PWD) : *Test.test ] ;
MOCK_MODULES	= $(EXTRAS_DIR)/readline.cpp $(EXTRAS_DIR)/mock_time.cpp ;
SKETCH_MODULES	= $(EXTRAS_DIR)/IfBlink.cpp ;

CXXTEST_GEN	= $(CXXTEST_DIR)/python/scripts/cxxtestgen --error-printer ;
LINK		= c++ ;
C++		= c++ ;
LOCATE_TARGET	= out ;
LOCATE_SOURCE	= out ;
CCFLAGS		= -fprofile-arcs -ftest-coverage -g -O0 -fno-inline -Wall -Wextra ;
#C++FLAGS	= $(CCFLAGS) ; 
LINKFLAGS	= -fprofile-arcs -lpthread -lrt ;

if ( $(OS) = MACOSX )
{
	HDRS 		+= /Developer/SDKs/MacOSX10.6.sdk/usr/include ;
	DEFINES 	+= MAC=1 ;
	LINKFLAGS 	= -fprofile-arcs -lpthread ;
}

rule TestSuite
{
  Depends $(<) : $(>) ;
  MakeLocate $(<) : $(LOCATE_SOURCE) ;
  Clean clean : $(<) ;
}

actions TestSuite
{
  $(CXXTEST_GEN) $(>) > $(<)
}

rule RunTest
{
  Depends $(<) : $(>) ;
  Clean clean : $(<) ;
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  Depends all : $(<) ;
}

actions RunTest
{
  $(RM) $(LOCATE_TARGET)/*.gcda
  $(>) | tee $(<)
}

rule Coverage 
{
  Depends $(<) : $(>) ;
  Depends $(<) : result ;
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  Clean clean : $(<) ;
  Clean clean : $(2:D=).gcov ;
}

actions ignore Coverage 
{
  gcov $(>) -o $(LOCATE_TARGET)/ > $(<)
  $(MV) *.gcov $(LOCATE_TARGET)/
  grep "###" $(LOCATE_TARGET)/$(INTERNAL_MODULES:D=).gcov
}
rule Pde
{
  Depends $(<) : $(>) ;
  MakeLocate $(<) : $(LOCATE_SOURCE) ;
  Clean clean : $(<) ;
}

actions Pde
{
  echo "#include <WProgram.h>" > $(<) 
  echo "#line 1 \"$(>)\"" >> $(<)
  cat $(>) >> $(<) 
}

rule C++Pde
{
  local _CPP = $(>:B).cpp ;
  Pde $(_CPP) : $(>) ;
  C++ $(<) : $(_CPP) ;
}

rule UserObject
{
  switch $(>:S)
  {
    case .pde : C++Pde $(<) : $(>) ;
  }
}
rule Objects
{
        local _i ;

        for _i in [ FGristFiles $(<) ]
        {
                Object $(_i:B)$(SUFOBJ) : $(_i) ;
                Depends obj : $(_i:B)$(SUFOBJ) ;
        }
}
rule Main
{
        MainFromObjects $(<) : $(>:B)$(SUFOBJ) ;
        Objects $(>) ;
}

TestSuite runner.cpp : $(TEST_MODULES) ;
Main Tests : runner.cpp $(INTERNAL_MODULES) $(MOCK_MODULES) ;
RunTest result : Tests ;
Coverage coverage : $(INTERNAL_MODULES) ;

Main Shell : $(EXTRAS_DIR)/shellmain.cpp $(INTERNAL_MODULES) $(CORE_MODULES) $(SKETCH_MODULES) ;
LINKFLAGS on Shell = $(LINKFLAGS) -lreadline -lpthread ;

TestSuite macrunner.cpp : SchedulerTest.test QueueTSTest.test SpiQueueTest.test ParserTest.test ClockTest.test LoggerTest.test EepromTest.test SketchThreadTest.test ;
Main MacTests : macrunner.cpp  $(INTERNAL_DIR)/Scheduler.cpp  $(INTERNAL_DIR)/Parser.cpp  $(INTERNAL_DIR)/SketchThread.cpp $(INTERNAL_DIR)/Clock.cpp $(INTERNAL_DIR)/Logger.cpp $(INTERNAL_DIR)/Eeprom.cpp $(INTERNAL_DIR)/Dispatcher.cpp $(INTERNAL_DIR)/SpiQueue.cpp $(EXTRAS_DIR)/readline.cpp $(EXTRAS_DIR)/mock_time.cpp ;

Main Shell : $(EXTRAS_DIR)/shellmain.cpp $(INTERNAL_MODULES) $(CORE_MODULES) $(SKETCH_MODULES) ;
LINKFLAGS on Shell = $(LINKFLAGS) -lreadline -lpthread ;
