#include <iostream>
#include <stdexcept>

#include <cxxtest/TestSuite.h>
#include <Dispatcher.h>
#include <Parser.h>
#include <IDispatchable.h>
#include <OutputCapture.h>

using namespace std;

bool return_true(const vector<string>&)
{
  return true;
}

class TestDispatchable: public IDispatchable
{
  std::string& getCommands(void) const
  {
    static std::string commands = "test";
    return commands;
  }
  bool runCommand( const Parser& p )
  {
    bool result = false;
    if ( p.at(0) == "test" )
      result = true;
    else if ( p.at(0) == "help" && p.at(1) == "test" )
    {
      cout << "test -- do nothing and return true" << endl;
      result = true;
    }
    return result;
  }
};

class NoCommandsDispatchable: public IDispatchable
{
  std::string& getCommands(void) const
  {
    static std::string commands = "";
    return commands;
  }
  bool runCommand( const Parser& )
  {
    return false;
  }
};


class DispatcherTestSuite: public CxxTest::TestSuite
{
  Parser parser;
  Dispatcher commands;
  OutputCapture cap;
public:
  void setUp()
  {
    parser.clear();
    commands.clear();
    cap.clear();
  }

  void testEmptyBlank( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute_new(Parser()) );
  }
  void testEmptyWithCommand( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute_new(Parser("test")) );
  }
  void testAddWorkerNew( void )
  {
    TestDispatchable obj;
    bool ok = commands.add(&obj);

    TS_ASSERT_EQUALS( ok, true );
  }
  void testAddDuplicateWorkerNew( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    TS_ASSERT_THROWS_ANYTHING( commands.add(&obj) );
  }
  void testWorkerNotFoundNew( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    TS_ASSERT_THROWS_ANYTHING( Dispatcher().execute_new(Parser("cantfindme")) );
  }
  void testWorkerDispatchOkNew( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    bool result = commands.execute_new(Parser("test"));

    TS_ASSERT_EQUALS( result, true );
  }
  void testWorkerDispatchStringOk( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    bool result = commands.execute("test");

    TS_ASSERT_EQUALS( result, true );
  }
  void testWorkerDispatchBlankString( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    TS_ASSERT_THROWS_ANYTHING( commands.execute("") );
  }
  void testExceptionsNew( void )
  {
    NoCommandsDispatchable badobj;

    TS_ASSERT_THROWS_ANYTHING( commands.add(NULL) );
    TS_ASSERT_THROWS_ANYTHING( commands.add(&badobj) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute_new(Parser()) );
  }
  void testHelpAll( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    cap.start();
    bool result = commands.execute("help");
    cap.stop();

    TS_ASSERT_EQUALS( result, true );
  }
  void testHelpOne( void )
  {
    TestDispatchable obj;
    commands.add(&obj);

    cap.start();
    bool result = commands.execute("help test");
    cap.stop();

    TS_ASSERT_EQUALS( result, true );
    TS_ASSERT_EQUALS( cap.contains("\n"), 1 );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
