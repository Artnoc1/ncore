// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>

// Project includes

#include <string>
#include <queue>

#include <inttypes.h>
#include <pthread.h>
#include <semaphore.h>

#include <SketchThread.h>
#include <QueueTS.h>

using namespace std;

extern "C" void setup(void) {}
extern "C" void loop(void) {}

struct PopperThread: SketchThread
{
  int num_pops;
  string result;
  QueueTS<string>& q;
  static PopperThread* that;
  static void thread_main(void)
  {
    that->run();
  }
  void run(void)
  {
    while(1)
    {
      result = q.pop();
      ++num_pops;
    }
  }
  PopperThread(QueueTS<string>& _q): SketchThread(1), num_pops(0), q(_q)
  {
    that = this;
    startCustom(thread_main);
  }
};

PopperThread* PopperThread::that = NULL;

class QTSTestSuite: public CxxTest::TestSuite
{
  QueueTS<string> *q;
public:
  void setUp()
  {
    q = new QueueTS<string>;
  }
  void tearDown()
  {
    delete q;
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( q->available(), false );
  }
  
  void testAdd( void )
  {
    q->push("Hello");
    TS_ASSERT_EQUALS( q->available(), true );
  }
  
  void testGet( void )
  {
    string in = "Hello";
    q->push(in);
    string result = q->pop();
    TS_ASSERT_EQUALS( result, in );
  }
  
  void testClear( void )
  {
    string in = "Hello";
    q->push(in);
    q->clear();
    TS_ASSERT_EQUALS( q->available(), false );
  }

  void delay_us(unsigned long us)
  {
    timespec tv;
    tv.tv_sec = 0;
    tv.tv_nsec = us * 1000L;
    nanosleep(&tv,NULL);
  }
  void testBlocksOnEmpty( void )
  {
    PopperThread t(*q);
    delay_us(50);

    TS_ASSERT_EQUALS( t.num_pops, 0 );
  }
  void testGetsOne( void )
  {
    PopperThread t(*q);
    delay_us(50);
    q->push("Hello");
    delay_us(50);

    TS_ASSERT_EQUALS( t.num_pops, 1 );
  }
  void testGetsLots( void )
  {
    PopperThread t(*q);
    
    const int num_pushes = 10;
    int i = num_pushes;
    while ( i-- )
    {
      q->push("Hello");
      delay_us(50);
    }
    delay_us(50);
    TS_ASSERT_EQUALS( t.num_pops, num_pushes );
  }
  void testGotTheRightOne( void )
  {
    string in = "Hello"; 
    PopperThread t(*q);
    delay_us(50);
    q->push(in);
    delay_us(50);

    TS_ASSERT_EQUALS( t.result, in );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
