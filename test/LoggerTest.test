#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <streambuf>
#include <iterator>
#include <algorithm>

#include <stdarg.h>

#include <cxxtest/TestSuite.h>
#include <pthread.h>

#include <Logger.h>
#include <Parser.h>
#include <Dispatcher.h>
#include <OutputCapture.h>
#include <Clock.h>

using namespace std;

extern "C" void init(void);

ostream& operator<<(ostream& os, const Logger& log)
{
  copy(log.begin(),log.end(),ostream_iterator<string>(os," "));
  return os;
}

class LoggerTestSuite: public CxxTest::TestSuite
{
  Logger log;
  Dispatcher commands;
  Parser parser;
  OutputCapture cap;
public:
  void setUp()
  {
    cap.clear();
    log.clear();
    parser.clear();
    commands.clear();

    commands.add(&log);
  }
  void tearDown()
  {
    cap.stop();
  }
  int countSubStrings( const string& whole, const string& partial )
  {
    size_t skip_count = partial.size();

    std::string::size_type and_pos( 0 );
    int count(0);
    while ( and_pos!=std::string::npos )
    {
      and_pos = whole.find(partial, and_pos );
      if ( and_pos != std::string::npos )
      {
        ++count;
        and_pos += skip_count;
      }
    }
    return count;
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( log.size(), 0 );
  }
  void testAdd( void )
  {
    log.add("Test1");
    log.add("Test12");
    log.add("Test123");
    TS_ASSERT_EQUALS( log.size(), 3 );
    TS_ASSERT( log.at(0).find("Test1") != string::npos );
  }
  void testVargs( void )
  {
    log.add("Test %02i",1);
    TS_ASSERT( log.at(0).find("Test 01") != string::npos );
  }
  void testListCommandOkNew( void )
  {
    cap.start();
    bool ok = commands.execute_new(Parser("list"));
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
  }
  void testListExceptionsNew( void )
  {
    cap.start();
    TS_ASSERT_THROWS_ANYTHING( commands.execute_new(Parser("list 1000")) );
  }
  void testListCommandWorksNew( void )
  {
    log.add("Test1");
    log.add("Test12");
    log.add("Test123");

    cap.start();
    commands.execute_new(Parser("list"));
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("NCORE"), 3 );
  }
  void todo_testListCommandRegexp( void )
  {
    log.add("Test1");
    log.add("Test12");
    log.add("Test123");

    parser.parse("list /T.*12/");

    cap.start();
    commands.execute_new(parser);
    cap.stop();

    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"NCORE"), 2 );
  }
  static void * write_logs(void* pv)
  {
    LoggerTestSuite* p = reinterpret_cast<LoggerTestSuite*>(pv);

    int i = 50;
    while (i--)
      p->log.add("Background thread %02i",i);

    return NULL;
  }
  void testThreadSafeNew( void )
  {
    pthread_t bg_thread;
    int err = pthread_create( &bg_thread, NULL, write_logs, this );
    TS_ASSERT_EQUALS( err, 0 );
    int i = 50;
    while (i--)
      log.add("Foreground thread");
    pthread_join( bg_thread, NULL );

    cap.start();
    commands.execute_new(Parser("list"));
    cap.stop();
    TS_ASSERT_EQUALS( cap.contains("Background"), 50 );
    TS_ASSERT_EQUALS( cap.contains("Foreground"), 50 );
  }
  void testThreadSafeListing( void )
  {
    pthread_t bg_thread;
    int err = pthread_create( &bg_thread, NULL, write_logs, this );
    TS_ASSERT_EQUALS( err, 0 );
    cap.start();
    int i = 7;
    while (i--)
    {
      cout << i << endl;
      commands.execute_new(Parser("list"));
    }
    pthread_join( bg_thread, NULL );
    cap.stop();

    // Just running means it worked
    TS_ASSERT( 1 );
  }
  void testWithNoClock( void )
  {
    log.add("test");
    TS_ASSERT_EQUALS( countSubStrings(log[0],"0000"),0 );
  }
  void testWithClock( void )
  {
    Clock clock;
    Logger log(clock);

    log.add("test");
    TS_ASSERT_EQUALS( countSubStrings(log[0],"0000"),1 );
  }
  void testClockMultipleEntries( void )
  {
    Clock clock;
    Logger log(clock);

    log.add("test");
    clock.delay(100);
    log.add("test");
    clock.delay(100);
    log.add("test");
    clock.delay(100);
    log.add("test");

    TS_ASSERT_EQUALS( countSubStrings(log.at(1),"100"),1 );
    TS_ASSERT_EQUALS( countSubStrings(log.at(2),"200"),1 );
    TS_ASSERT_EQUALS( countSubStrings(log.at(3),"300"),1 );
  }
  void testRateLimiter( void )
  {
    Clock clock;
    Logger log(clock);

    int i = 12;
    while(i--)
    {
      log.add("test");
      clock.delay(1);
    }

    TS_ASSERT_EQUALS( log.size(), 13 );
    TS_ASSERT_EQUALS( countSubStrings(log.at(10),"limit"), 1 );
  }
  void testCommandHelp( void )
  {
    cap.start();
    bool ok = commands.execute("help");
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( (bool)cap.contains("list"), true );
  }
  void testLineContains( void )
  {
    log.add("test 1");
    log.add("2 test");
    log.add("23test");
    log.add("test3435");

    TS_ASSERT_EQUALS( log.lines_contain("test"), 4 );
    TS_ASSERT_EQUALS( log.lines_contain("something else"), 0 );
  }
  void testRateControl( void )
  {
    Clock clock;
    Logger log(clock);
    commands.clear();
    commands.add(&log);

    bool ok = false;

    try
    {
      ok = commands.execute("log rate 100");
    }
    catch (runtime_error* e)
    {
      cerr << e->what();
    }
    int i = 21;
    while(i--)
    {
      log.add("test");
      clock.delay(5);
    }

    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( log.lines_contain(" 0001"), 11 );
  }
  void testExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute("log") );
    TS_ASSERT_THROWS_ANYTHING( commands.execute("log rate") );
    TS_ASSERT_THROWS_ANYTHING( commands.execute("log something") );
  }
  void t_printf(const char* format,...)
  {
    va_list args;
    va_start (args, format);
    log.sketch_v("TEST",format,args);
    va_end (args);
  }
  void testSketchVargs( void )
  {
    t_printf("Hello %s","test");
    TS_ASSERT_EQUALS( log.lines_contain("Hello test"), 1 );
  }
  void testVerbose( void )
  {
    cap.start();
    log.setVerbose(true);
    log.add("test");
    cap.stop();
    TS_ASSERT_EQUALS( cap.contains("test"), 1 );
  }

};

// vim:cin:ai:sts=2 sw=2 ft=cpp
