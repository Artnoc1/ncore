#include <vector>
#include <string>

#include <cxxtest/TestSuite.h>

#include <SketchThread.h>
#include <SpiQueue.h>
#include <Dispatcher.h>
#include <OutputCapture.h>
#include <Logger.h>

using namespace std;

static QueueTS<string> q;

extern ostream& operator<<(ostream& os, const Logger& log);
extern Logger global_logger;

void semaphores_test_main(void)
{
  bool done = false;
  while(!done)
  {
    if ( ! q.available() )
      global_logger.sketch("QPOP","Blocking...");
    string s = q.pop();
    global_logger.sketch("QPOP",s.c_str());

    done = ( s == "quit" );
  }
}

SpiQueue* thespiq;

void spi_test_main(void)
{
  while ( thespiq->transfer(-1) != 0xb0 ) {}
}

class SpiQueueTestSuite: public CxxTest::TestSuite
{
  SpiQueue spiq;
  Logger logger;
  Dispatcher dispatch;
  OutputCapture cap;
public:
  SpiQueueTestSuite(void): spiq(logger)
  {
  }
  void setUp()
  {
    q.clear();
    spiq.clear();
    logger.clear();
    dispatch.clear();
    dispatch.add(&spiq);
    dispatch.add(&logger);
    cap.clear();
  }
  void real_delay_us( unsigned long us )
  {
    // Avoids the mock clock and inserts true delay.
    timespec tv;
    tv.tv_sec = 0;
    tv.tv_nsec = us * 1000L;
    nanosleep(&tv,NULL);
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( q.available(), false );
  }

  void testQueueSimple( void )
  {
    q.push("test");

    TS_ASSERT_EQUALS( q.pop(), "test" );
  }
  void testQueueAvailable( void )
  {
    q.push("test");

    TS_ASSERT_EQUALS( q.available(), true );
  }
  void testQueueEmptyThenAvailable( void )
  {
    q.push("test");
    q.pop();

    TS_ASSERT_EQUALS( q.available(), false );
  }
  void testQueueDouble( void )
  {
    q.push("first");
    q.push("second");

    TS_ASSERT_EQUALS( q.pop(), "first" );
    TS_ASSERT_EQUALS( q.pop(), "second" );
  }
  void testQueueConcurrent( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    SketchThread t(1);
    t.startCustom(semaphores_test_main);
    real_delay_us(5);

    global_logger.internal("QPUS","first");
    q.push("first");
    global_logger.internal("QPUS","second");
    q.push("second");
    global_logger.internal("QPUS","third");
    q.push("third");

    real_delay_us(5);

    q.push("quit");
    global_logger.internal("QPUS","quit");

    t.waitToFinish();

    //cerr << logger;

    TS_ASSERT_EQUALS( global_logger.lines_contain("first"), 2 );
    TS_ASSERT_EQUALS( global_logger.lines_contain("quit"), 2 );
    //cerr << ":OUT]" << endl;
  }
  void testSpiTransferRead( void )
  {
    spiq.hwEnqueue(0xfe);
    uint8_t in = spiq.transfer(-1);

    TS_ASSERT_EQUALS( in, 0xfe );
  }
  void testSpiTransferMultiple( void )
  {
    spiq.hwEnqueue(0x20);
    spiq.hwEnqueue(0x80);
    spiq.hwEnqueue(0x90);
    spiq.hwEnqueue(0xA0);

    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x20 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x80 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x90 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xA0 );
  }
  void testSpiTransferLogging( void )
  {
    spiq.hwEnqueue(0xfe);
    spiq.transfer(-1);

    TS_ASSERT_EQUALS( logger.lines_contain("fe"), 1 );
  }
  void testSpiCommand( void )
  {
    bool ok = dispatch.execute("spi 1");
    TS_ASSERT_EQUALS( ok, true );
  }
  void testSpiCommandReceived( void )
  {
    dispatch.execute("spi d0");
    uint8_t in = spiq.transfer(-1);

    TS_ASSERT_EQUALS( in, 0xd0 );
  }
  void testSpiCommandReceivedMultiple( void )
  {
    dispatch.execute("spi 0 f1 f2 f3 f4");
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf1 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf2 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf3 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf4 );
  }
  void testSpiCommandExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute("spi") );
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute("spi default") );
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute("spi 5x") );
  }
  void testCommandHelp( void )
  {
    cap.start();
    bool ok = dispatch.execute("help");
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( (bool)cap.contains("spi"), true );
  }
  void testCommandDefault( void )
  {
    thespiq = &spiq;

    dispatch.execute("spi default f0");
    spiq.transfer(-1);

    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0xf0 );
  }
  void testCommandX( void )
  {
    dispatch.execute("spi 5x 0");
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x0 );
    TS_ASSERT_EQUALS( spiq.transfer(-1), 0x0 );
  }
  void todo_testMoreCommands( void )
  {
    dispatch.execute("spi nodefault");
  }
  void testCommandConcurrent( void )
  {
    SketchThread t(1);
    t.startCustom(spi_test_main);

    // This probably needs a mutex, too timing-dependant.
    real_delay_us(1);

    spiq.hwEnqueue(0xb0);
    t.waitToFinish();

    TS_ASSERT_EQUALS( logger.lines_contain("Waiting"), 1 );
    TS_ASSERT_EQUALS( logger.lines_contain("in ff"), 2 );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
