#include <iostream>
#include <sstream>
#include <streambuf>

#include <pthread.h>
#include <cxxtest/TestSuite.h>

#include <Pins.h>
#include <Parser.h>
#include <Dispatcher.h>
#include <Logger.h>

using namespace std;

extern "C" void init(void);

const int LOW = 0;
const int HIGH = 1;

class OutputCapture
{
  stringstream test_buffer;
  streambuf* cout_sbuf;
public:
  void clear(void)
  {
    test_buffer.str(string());
    cout_sbuf = std::cout.rdbuf(); // save original sbuf
  }
  void start( void )
  {
    // Capture the input to a test buffer
    cout.rdbuf(test_buffer.rdbuf()); // redirect 'cout' to a 'fout'
  }
  void stop( void )
  {
    // Restore the output stream
    cout.rdbuf(cout_sbuf); // restore the original stream buffer
  }
  string buffer(void) const
  {
    return test_buffer.str();
  }
};

class PinsTestSuite: public CxxTest::TestSuite
{
  Pins pins;
  Dispatcher commands;
  Logger log;
  OutputCapture cap;

  static int isr_called_count;
public:
  void setUp()
  {
    pins.clear();
    commands.clear();
    log.clear();
    cap.clear();

    pins.addCommandsTo(commands);
    isr_called_count = 0;
    
    log.addCommandsTo(commands);

    cap.start();
    init();
    cap.stop();
  }
  static void isr(void)
  {
    ++isr_called_count;
  }
  static void isr_large(void)
  {
    isr_called_count += 5;
  }
  int countSubStrings( const string& whole, const string& partial )
  {
    size_t skip_count = partial.size();

    std::string::size_type and_pos( 0 );
    int count(0);
    while ( and_pos!=std::string::npos )
    {
      and_pos = whole.find(partial, and_pos );
      if ( and_pos != std::string::npos )
      {
        ++count;
        and_pos += skip_count;
      }
    }
    return count;
  }

  void testEmpty( void )
  {
    int value = pins.digitalRead(0);

    TS_ASSERT_EQUALS( value, LOW );
  }
  void testSetDigital( void )
  {
    pins.hwSetDigital(0,HIGH);
    int value = pins.digitalRead(0);

    TS_ASSERT_EQUALS( value, HIGH );
  }
  void testDigitalWrite( void )
  {
    pins.pinMode(0,OUTPUT);
    pins.digitalWrite(0,HIGH);
    int value = pins.hwGetDigital(0);

    TS_ASSERT_EQUALS( value, HIGH );
  }
  void testSetAnalog( void )
  {
    pins.hwSetAnalog(0,512);
    int value = pins.analogRead(0);

    TS_ASSERT_EQUALS( value, 512 );
  }
  void testRanges( void )
  {
    TS_ASSERT_THROWS_ANYTHING( pins.digitalWrite(1000,HIGH) );
    TS_ASSERT_THROWS_ANYTHING( pins.digitalRead(1000) );
    TS_ASSERT_THROWS_ANYTHING( pins.pinMode(1000,OUTPUT) );
    TS_ASSERT_THROWS_ANYTHING( pins.hwSetDigital(1000,HIGH) );
    TS_ASSERT_THROWS_ANYTHING( pins.hwSetAnalog(1000,1000) );
    TS_ASSERT_THROWS_ANYTHING( pins.hwGetDigital(1000) );
  }
  void testPinModeInput( void )
  {
    // Setting pinMode INPUT means digitalWrite will have no impact
    pins.pinMode(2,INPUT);
    pins.digitalWrite(2,HIGH);
    pins.pinMode(3,OUTPUT);
    pins.digitalWrite(3,HIGH);
    
    TS_ASSERT_EQUALS( pins.hwGetDigital(2), LOW );
    TS_ASSERT_EQUALS( pins.hwGetDigital(3), HIGH );
  }
  void testAttachInterrupt( void )
  {
    pins.attachInterrupt( 0, isr );
    pins.hwTriggerInterrupt( 0 );

    TS_ASSERT_EQUALS( isr_called_count, 1 );
  }
  void testCallsCorrectInterrupt( void )
  {
    pins.attachInterrupt( 0, isr );
    pins.attachInterrupt( 1, isr_large );
    pins.hwTriggerInterrupt( 1 );

    TS_ASSERT_EQUALS( isr_called_count, 5 );
  }
  void testAttachInterruptTooHigh( void )
  {
    TS_ASSERT_THROWS_ANYTHING( pins.attachInterrupt( 10, isr ) );
    TS_ASSERT_THROWS_ANYTHING( pins.hwTriggerInterrupt( 10 ) );
  }
  void testOverrideInterrupt( void )
  {
    pins.attachInterrupt( 0, isr );
    pins.attachInterrupt( 0, isr_large );
    pins.hwTriggerInterrupt( 0 );

    TS_ASSERT_EQUALS( isr_called_count, 5 );
  }
  void testDetachInterrupt( void )
  {
    pins.attachInterrupt( 0, isr );
    pins.detachInterrupt( 0 );

    TS_ASSERT_THROWS_ANYTHING( pins.hwTriggerInterrupt( 0 ) );
  }
  void testAddCommands( void )
  {
    int numcommands = commands.size();

    TS_ASSERT( numcommands > 0 );
  }
  void testRunCommand( void )
  {
    cap.start();
    bool ok = commands.execute(Parser("pins"));
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
  }
  void testRunCommandPinsEmpty( void )
  {
    cap.start();
    bool ok = commands.execute(Parser("pins"));
    cap.stop();
    int num_zeroes = countSubStrings(cap.buffer(),":0");

    TS_ASSERT_EQUALS( num_zeroes, 28 );
  }
  void testRunCommandPinsSomeSet( void )
  {
    pins.hwSetDigital(0,HIGH);
    pins.hwSetAnalog(0,512);

    cap.start();
    bool ok = commands.execute(Parser("pins"));
    cap.stop();
    int num_zeroes = countSubStrings(cap.buffer(),":0");

    TS_ASSERT_EQUALS( num_zeroes, 26 );
  }
  void testCommandPinSet( void )
  {
    commands.execute(Parser("pin 5 high"));

    TS_ASSERT_EQUALS( pins.digitalRead(5), HIGH );
  }
  void testCommandPinSetAndBack( void )
  {
    commands.execute(Parser("pin 5 high"));
    commands.execute(Parser("pin 5 low"));

    TS_ASSERT_EQUALS( pins.digitalRead(5), LOW );
  }
  void testCommandPinSetExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 100 high")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 5")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 5 something")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 5 high something")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin something high")) );
  }
  void testCommandAnalogSet( void )
  {
    commands.execute(Parser("pin a5 512"));

    TS_ASSERT_EQUALS( pins.analogRead(5), 512 );
  }
  void testCommandAnalogSetTwice( void )
  {
    commands.execute(Parser("pin a0 512"));
    commands.execute(Parser("pin a0 1"));

    TS_ASSERT_EQUALS( pins.analogRead(0), 1 );
  }
  void testCommandAnalogPinSetExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5 high")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5 1000 something")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a1000 1000")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5 2000")) );
  }
  void testCommandIrq( void )
  {
    pins.attachInterrupt( 1, isr );
    commands.execute(Parser("irq 1"));

    TS_ASSERT_EQUALS( isr_called_count, 1 );
  }
  void testCommandIrqExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("irq 100")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("irq something")) );
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("irq")) );
  }
  static void* sketch_blink(void* pv)
  {
    PinsTestSuite* p = reinterpret_cast<PinsTestSuite*>(pv);
   
    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE,NULL);
    pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS,NULL); 
    
    int state = LOW;
    const int toggle_pin = 13;
    const int done_pin = 11;
    const int start_pin = 10;
    p->pins.pinMode(toggle_pin,OUTPUT);
    p->pins.pinMode(done_pin,OUTPUT);
    p->pins.pinMode(start_pin,INPUT);
    while (p->pins.digitalRead(start_pin) == LOW)
    {
    }
    int i = 5;
    while(i--)
    {
      state ^= HIGH;
      p->pins.digitalWrite(toggle_pin,state);
      p->log.add("PIN %i %s",toggle_pin,state?"HIGH":"LOW");
    }
    p->pins.digitalWrite(done_pin,HIGH);
    while (1)
    {
    }
  }
  void testConcurrency( void )
  {
    pthread_t sketch_thread;
    int err = pthread_create( &sketch_thread, NULL, sketch_blink, this );
    TS_ASSERT_EQUALS( err, 0 );
    pins.hwSetDigital(10,HIGH);
    while ( pins.hwGetDigital(11) == LOW )
    {
    }
    pthread_cancel( sketch_thread );
    pthread_join( sketch_thread, NULL );
    
    cap.start();
    commands.execute(Parser("list"));
    cap.stop();
    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"PIN 13") , 5 );
    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"HIGH") , 3 );
  }
};

// Extra tests to dig deep into the unexposed internals of Logger
// in pursuit of 100% code coverage
class PinsInternalTestSuite: public CxxTest::TestSuite
{
  class PinsInternal: Pins
  {
  public:
    void bad_static_pins(void)
    {
      // This is bad.  Don't do this in real life.
      Pins::reset();
      Pins::static_command_pins(vector<string>());
    }
    void bad_static_pin(void)
    {
      // This is bad.  Don't do this in real life.
      Pins::reset();
      Pins::static_command_pin(vector<string>());
    }
    void bad_static_irq(void)
    {
      // This is bad.  Don't do this in real life.
      Pins::reset();
      Pins::static_command_irq(vector<string>());
    }
  };
public:
  void testBadStaticCommands(void)
  {
    TS_ASSERT_THROWS_ANYTHING( PinsInternal().bad_static_pins() );
    TS_ASSERT_THROWS_ANYTHING( PinsInternal().bad_static_pin() );
    TS_ASSERT_THROWS_ANYTHING( PinsInternal().bad_static_irq() );
  }
};

int PinsTestSuite::isr_called_count;


// vim:cin:ai:sts=2 sw=2 ft=cpp
