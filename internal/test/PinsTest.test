#include <iostream>
#include <sstream>
#include <streambuf>
#include <cxxtest/TestSuite.h>
#include <Pins.h>
#include <Parser.h>
#include <Dispatcher.h>

using namespace std;

const int LOW = 0;
const int HIGH = 1;

class PinsTestSuite: public CxxTest::TestSuite
{
  Pins pins;
  Dispatcher commands;
  stringstream test_buffer;
  streambuf* cout_sbuf;
public:
  void setUp()
  {
    pins.clear();
    commands.clear();
    test_buffer.str(string());
    cout_sbuf = NULL;
    pins.addCommandsTo(commands);
  }

  void testEmpty( void )
  {
    int value = pins.digitalRead(0);

    TS_ASSERT_EQUALS( value, LOW );
  }
  void testSetDigital( void )
  {
    pins.hwSetDigital(0,HIGH);
    int value = pins.digitalRead(0);

    TS_ASSERT_EQUALS( value, HIGH );
  }
  void testSetAnalog( void )
  {
    pins.hwSetAnalog(0,512);
    int value = pins.analogRead(0);

    TS_ASSERT_EQUALS( value, 512 );
  }
  void testAddCommands( void )
  {
    int numcommands = commands.size();

    TS_ASSERT( numcommands > 0 );
  }
  int countSubStrings( const string& whole, const string& partial )
  {
    size_t skip_count = partial.size();

     std::string::size_type and_pos( 0 );
     int count(0);
     while ( and_pos!=std::string::npos )
     {
	     and_pos = whole.find(partial, and_pos );
	     if ( and_pos != std::string::npos )
	     {
	       ++count;
	       and_pos += skip_count; 
	     }
     }
     return count;
  }
  void testRunCommand( void )
  {
    startCoutCapture();
    bool ok = commands.execute(Parser("pins"));
    string output = endCoutCapture();
    
    TS_ASSERT_EQUALS( ok, true );
  }
  void startCoutCapture( void )
  {
    // Capture the input to a test buffer
    cout_sbuf = std::cout.rdbuf(); // save original sbuf
    cout.rdbuf(test_buffer.rdbuf()); // redirect 'cout' to a 'fout'
  }
  string endCoutCapture( void )
  {
    // Restore the output stream
    cout.rdbuf(cout_sbuf); // restore the original stream buffer

    return test_buffer.str();
  }
  void testRunCommandPinsEmpty( void )
  {
    startCoutCapture();
    bool ok = commands.execute(Parser("pins"));
    string output = endCoutCapture();
    int num_zeroes = countSubStrings(output,":0");
    
    TS_ASSERT_EQUALS( num_zeroes, 28 );
  }
  void testRunCommandPinsSomeSet( void )
  {
    pins.hwSetDigital(0,HIGH);
    pins.hwSetAnalog(0,512);

    startCoutCapture();
    bool ok = commands.execute(Parser("pins"));
    string output = endCoutCapture();
    int num_zeroes = countSubStrings(output,":0");
    
    TS_ASSERT_EQUALS( num_zeroes, 26 );
  }
  void testCommandPinSet( void )
  {
    commands.execute(Parser("pin 5 high"));

    TS_ASSERT_EQUALS( pins.digitalRead(5), HIGH );
  }
  void testCommandPinSetAndBack( void )
  {
    commands.execute(Parser("pin 5 high"));
    commands.execute(Parser("pin 5 low"));

    TS_ASSERT_EQUALS( pins.digitalRead(5), LOW );
  }
  void testCommandPinSetExceptions_1( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin")) );
  }
  void testCommandPinSetExceptions_2( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 100 high")) );
  }
  void testCommandPinSetExceptions_3( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 5")) );
  }
  void testCommandPinSetExceptions_4( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 5 something")) );
  }
  void testCommandPinSetExceptions_5( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin 5 high something")) );
  }
  void testCommandPinSetExceptions_6( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin something high")) );
  }
  void testCommandAnalogSet( void )
  {
    commands.execute(Parser("pin a5 512"));

    TS_ASSERT_EQUALS( pins.analogRead(5), 512 );
  }
  void testCommandAnalogSetTwice( void )
  {
    commands.execute(Parser("pin a0 512"));
    commands.execute(Parser("pin a0 1"));

    TS_ASSERT_EQUALS( pins.analogRead(0), 1 );
  }
  void testCommandAnalogPinSetExceptions_1( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5")) );
  }
  void testCommandAnalogPinSetExceptions_2( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5 high")) );
  }
  void testCommandAnalogPinSetExceptions_3( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5 1000 something")) );
  }
  void testCommandAnalogPinSetExceptions_4( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a1000 1000")) );
  }
  void testCommandAnalogPinSetExceptions_5( void )
  {
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("pin a5 2000")) );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
