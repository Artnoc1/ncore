// Standard C++ includes
#include <vector>
#include <string>
#include <streambuf>
#include <iostream>
#include <sstream>
// Standard C includes
// None
// Library includes
#include <cxxtest/TestSuite.h>
// Project includes
#include <Shell.h>
#include <Logger.h>
#include <Dispatcher.h>
#include <Parser.h>
#include <Pins.h>
#include <OutputCapture.h>

using namespace std;

extern void mock_readline_add(const string& _str);

class FailDispatchable: public IDispatchable
{
  std::string& getCommands(void) const { static std::string commands = "fail"; return commands; }
  bool runCommand( const Parser& ) { return false; }
};

class ShellTestSuite: public CxxTest::TestSuite
{
  Pins pins;
  Dispatcher commands;
  Logger log;
  OutputCapture cap;
public:
  void setUp()
  {
    pins.clear();
    commands.clear();
    log.clear();
    cap.clear();
    commands.add(&pins);
    commands.add(&log);
  }
  void teardown()
  {
    cap.stop();
  }
  int countSubStrings( const string& whole, const string& partial )
  {
    size_t skip_count = partial.size();

    std::string::size_type and_pos( 0 );
    int count(0);
    while ( and_pos!=std::string::npos )
    {
      and_pos = whole.find(partial, and_pos );
      if ( and_pos != std::string::npos )
      {
        ++count;
        and_pos += skip_count;
      }
    }
    return count;
  }

  void testRuns( void )
  {
    cap.start();
    Shell().run(Dispatcher());
    cap.stop();

    TS_ASSERT( cap.buffer().size() > 0 );
  }
  void testEmpty( void )
  {
    cap.start();
    Shell().run(Dispatcher());
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("ncore") , 1 );
  }
  void testQuit( void )
  {
    mock_readline_add("quit");

    cap.start();
    Shell().run(Dispatcher());
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("quit") , 1 );
  }
  void testTwoCommands( void )
  {
    mock_readline_add("something");
    mock_readline_add("quit");

    cap.start();
    Shell().run(Dispatcher());
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("ncore") , 2 );
  }
  void testNotFound( void )
  {
    mock_readline_add("something");
    mock_readline_add("quit");

    cap.start();
    Shell().run(Dispatcher());
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("not found") , 1 );
  }
  void testRealCommand( void )
  {
    mock_readline_add("pins");

    cap.start();
    Shell().run(commands);
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("13:0") , 1 );
  }
  void testBadCommand( void )
  {
    mock_readline_add("pin something");

    cap.start();
    Shell().run(commands);
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("Error: ") , 1 );
  }
  void testCommandFail( void )
  {
    FailDispatchable fail;
    commands.add(&fail);
    mock_readline_add("fail");
    mock_readline_add("quit");
    
    cap.start();
    Shell().run(commands);
    cap.stop();
    
    TS_ASSERT_EQUALS( cap.contains("failed") , 1 );
  }
  void testCommandSequence( void )
  {
    mock_readline_add("pin 13 high");
    mock_readline_add("pin 12 high");
    mock_readline_add("pin 10 high");
    mock_readline_add("pin a5 1000");
    mock_readline_add("pins");

    cap.start();
    Shell().run(commands);
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("13:1") , 1 );
    TS_ASSERT_EQUALS( cap.contains("12:1") , 1 );
    TS_ASSERT_EQUALS( cap.contains("10:1") , 1 );
    TS_ASSERT_EQUALS( cap.contains("5:1000") , 1 );
  }
  void testCR( void )
  {
    mock_readline_add(" ");

    cap.start();
    try
    {
      Shell().run(commands);
    }
    catch(...)
    {
      TS_FAIL( "Exception thrown" );
      cap.stop();
    }
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("ncore") , 2 );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
