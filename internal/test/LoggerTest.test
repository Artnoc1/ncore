#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <streambuf>

#include <cxxtest/TestSuite.h>
#include <pthread.h>

#include <Logger.h>
#include <Parser.h>
#include <Dispatcher.h>
#include <OutputCapture.h>

using namespace std;

extern "C" void init(void);

class LoggerTestSuite: public CxxTest::TestSuite
{
  Logger log;
  Dispatcher commands;
  Parser parser;
  OutputCapture cap;
public:
  void setUp()
  {
    cap.clear();
    log.clear();
    parser.clear();
    log.addCommandsTo(commands);
  }
  void tearDown()
  {
    cap.stop();
  }
  int countSubStrings( const string& whole, const string& partial )
  {
    size_t skip_count = partial.size();

    std::string::size_type and_pos( 0 );
    int count(0);
    while ( and_pos!=std::string::npos )
    {
      and_pos = whole.find(partial, and_pos );
      if ( and_pos != std::string::npos )
      {
        ++count;
        and_pos += skip_count;
      }
    }
    return count;
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( log.size(), 0 );
  }
  void testAdd( void )
  {
    log.add("Test1");
    log.add("Test12");
    log.add("Test123");
    TS_ASSERT_EQUALS( log.size(), 3 );
    TS_ASSERT( log.at(0).find("Test1") != string::npos );
  }
  void testVargs( void )
  {
    log.add("Test %02i",1);
    TS_ASSERT( log.at(0).find("Test 01") != string::npos );
  }
  void testListCommandOk( void )
  {
    parser.parse("list");

    cap.start();
    bool ok = commands.execute(parser);
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
  }
  void testListExceptions_1( void )
  {
    cap.start();
    TS_ASSERT_THROWS_ANYTHING( commands.execute(Parser("list 1000")) );
  }
  void testListCommandWorks( void )
  {
    log.add("Test1");
    log.add("Test12");
    log.add("Test123");

    parser.parse("list");

    cap.start();
    commands.execute(parser);
    cap.stop();

    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"NCORE"), 3 );
  }
  void todo_testListCommandRegexp( void )
  {
    log.add("Test1");
    log.add("Test12");
    log.add("Test123");

    parser.parse("list /T.*12/");

    cap.start();
    commands.execute(parser);
    cap.stop();

    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"NCORE"), 2 );
  }
  static void * write_logs(void* pv)
  {
    LoggerTestSuite* p = reinterpret_cast<LoggerTestSuite*>(pv);

    int i = 50;
    while (i--)
      p->log.add("Background thread %02i",i);

    return NULL;
  }
  void testThreadSafe( void )
  {
    pthread_t bg_thread;
    int err = pthread_create( &bg_thread, NULL, write_logs, this );
    TS_ASSERT_EQUALS( err, 0 );
    int i = 50;
    while (i--)
      log.add("Foreground thread");
    pthread_join( bg_thread, NULL );

    cap.start();
    commands.execute(Parser("list"));
    cap.stop();
    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"Background"), 50 );
    TS_ASSERT_EQUALS( countSubStrings(cap.buffer(),"Foreground"), 50 );
  }
  void testThreadSafeListing( void )
  {
    pthread_t bg_thread;
    int err = pthread_create( &bg_thread, NULL, write_logs, this );
    TS_ASSERT_EQUALS( err, 0 );
    cap.start();
    int i = 7;
    while (i--)
    {
      cout << i << endl;
      commands.execute(Parser("list"));
    }
    pthread_join( bg_thread, NULL );
    cap.stop();
   
    // Just running means it worked
    TS_ASSERT( 1 );
  }
  void testWithNoClock( void )
  {
    log.add("test");
    TS_ASSERT_EQUALS( countSubStrings(log[0],"0000"),0 );
  }
  void testWithClock( void )
  {
    Clock clock;
    log.setClock(clock);

    log.add("test");
    TS_ASSERT_EQUALS( countSubStrings(log[0],"0000"),1 );
  }
  void testClockMultipleEntries( void )
  {
    Clock clock;
    log.setClock(clock);

    log.add("test");
    clock.delay(100);
    log.add("test");
    clock.delay(100);
    log.add("test");
    clock.delay(100);
    log.add("test");

    TS_ASSERT_EQUALS( countSubStrings(log.at(1),"100"),1 );
    TS_ASSERT_EQUALS( countSubStrings(log.at(2),"200"),1 );
    TS_ASSERT_EQUALS( countSubStrings(log.at(3),"300"),1 );
  }
};

// Extra tests to dig deep into the unexposed internals of Logger
// in pursuit of 100% code coverage
class LoggerInternalTestSuite: public CxxTest::TestSuite
{
  class LoggerInternal: Logger
  {
  public:
    void bad_static_list(void)
    {
      // This is bad.  Don't do this in real life.
      Logger::reset();
      Logger::static_command_list(vector<string>());
    }
  };
public:
  void testBadStaticList(void)
  {
    TS_ASSERT_THROWS_ANYTHING( LoggerInternal().bad_static_list() );
  }
};

// vim:cin:ai:sts=2 sw=2 ft=cpp
