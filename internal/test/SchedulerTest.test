// STL includes
#include <vector>
#include <string>
#include <iostream>
#include <stdexcept>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>

// Project includes
#include <SketchThread.h>
#include <Parser.h>
#include <Dispatcher.h>
#include <Clock.h>
#include <IDispatchable.h>
#include <Logger.h>
#include <Scheduler.h>
#include <OutputCapture.h>

using namespace std;

extern ostream& operator<<(ostream& os, const Logger& log);
extern "C" void mock_time_reset(void);
extern Logger global_logger;

struct TestAction: public IDispatchable
{
  int called;
  TestAction(void): called(0) {}
  std::string& getCommands(void) const
  {
    static std::string commands = "test";
    return commands;
  }
  bool runCommand( const Parser& p )
  {
    global_logger.sketch("TEST","TestAction %i",p.size());
    bool result = false;
    if ( p.at(0) == "test" )
    {
      ++called;
      if ( p.size() > 1 && p.at(1) == "more" )
        called += 4;
      result = true;
    }
    else if ( p.at(0) == "help" && p.at(1) == "test" )
    {
      cout << "test -- do nothing and return true" << endl;
      result = true;
    }
    return result;
  }
};

Dispatcher global_dispatch;
Scheduler global_sched(global_dispatch,global_logger);

void sched_test_main(void)
{
  bool done = false;
  while(!done)
  {
    global_sched.runonce();
    done = ! global_sched.size();
  }
}

class SchedulerTestSuite: public CxxTest::TestSuite
{
  Scheduler sched;
  Dispatcher dispatch;
  Clock clock;
  TestAction action;
  OutputCapture cap;
public:
  SchedulerTestSuite(void): sched(dispatch,global_logger)
  {
  }
  void real_delay_us( unsigned long us )
  {
    // Avoids the mock clock and inserts true delay.
    timespec tv;
    tv.tv_sec = 0;
    tv.tv_nsec = us * 1000L;
    nanosleep(&tv,NULL);
  }

  void setUp()
  {
    mock_time_reset();
    clock = Clock();
    dispatch.clear();
    sched.clear();
    action = TestAction();
    dispatch.add(&action);
    dispatch.add(&sched);
    global_logger.clear();
    dispatch.add(&global_logger);
    cap.clear();
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( sched.size(), 0 );
  }
  void testAdd( void )
  {
    sched.add(1000,string("test")) ;
    TS_ASSERT_EQUALS( sched.size(), 1 );
  }
  void testNotRun( void )
  {
    sched.add(1000,string("test"));
    sched.runonce(); // protected!!
    TS_ASSERT_EQUALS( action.called, 0 );
  }
  void testRun( void )
  {
    sched.add(1000,string("test"));
    clock.delay(1100);
    sched.runonce(); // protected!!
    TS_ASSERT_EQUALS( action.called, 1 );
  }
  void testRunTwice( void )
  {
    sched.add(1000,string("test"));
    sched.add(2000,string("test more"));
    clock.delay(1100);
    sched.runonce(); // protected!!
    TS_ASSERT_EQUALS( action.called, 1 );
    clock.delay(1100);
    sched.runonce(); // protected!!
    TS_ASSERT_EQUALS( action.called, 6 );
  }
  void testRunGarbage( void )
  {
    cap.start();
    sched.add(1,string("something"));
    sched.add(2,string("list"));
    clock.delay(3);
    sched.runonce(); // protected!!
    sched.runonce(); // protected!!
    cap.stop();
    TS_ASSERT_EQUALS( global_logger.lines_contain("Error"), 1 );
  }
  void testConcurrent( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    global_dispatch.add(&action);
    global_logger.setClock(clock);
    global_logger.setRate(1);
    //global_logger.setVerbose(true);  // Uncomment if it hangs, to watch the action and see where the prob is
    SketchThread t(1);
    t.startCustom(sched_test_main);

    real_delay_us(5);

    global_sched.add(100,string("test"));
    real_delay_us(5L);
    global_sched.add(200,string("test more"));
    global_sched.add(300,string("test more"));

#if 0
    clock.delay(8000);
    real_delay_us(3500);
#else
    clock.delay(50);
    real_delay_us(50000L);
    clock.delay(50);
    real_delay_us(50000L);

    clock.delay(50);
    real_delay_us(50000L);
    clock.delay(50);
    real_delay_us(50000L);

    clock.delay(50);
    real_delay_us(50000L);
    clock.delay(50);
    real_delay_us(50000L);
#endif

    real_delay_us(5);

    t.waitToFinish();

    global_logger.setVerbose(false);
    //cerr << global_logger;

    TS_ASSERT_EQUALS( global_logger.lines_contain("100 SK TEST"), 1 );
    TS_ASSERT_EQUALS( global_logger.lines_contain("200 SK TEST"), 1 );
    TS_ASSERT_EQUALS( global_logger.lines_contain("300 SK TEST"), 1 );
    //cerr << ":OUT]" << endl;
  }
  void testAtCommandOk( void )
  {
    bool ok = dispatch.execute("at 1 list");
    TS_ASSERT_EQUALS( ok, true );
  }
  void testAtCommandWorks( void )
  {
    dispatch.execute("at 1 test");
    clock.delay(2);
    sched.runonce(); // protected!!
    TS_ASSERT_EQUALS( action.called, 1 );
  }
  void testAtCommandTwice( void )
  {
    cap.start();
    dispatch.execute("at 1 test");
    dispatch.execute("at 2 list");
    clock.delay(3);
    sched.runonce(); // protected!!
    sched.runonce(); // protected!!
    cap.stop();

    TS_ASSERT_EQUALS( cap.contains("AT"), 2 );
    TS_ASSERT_EQUALS( cap.contains("TEST"), 1 );
  }
  void testCommandHelp( void )
  {
    cap.start();
    bool ok = dispatch.execute("help");
    cap.stop();

    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( (bool)cap.contains("at"), true );
  }
  void testCommandExceptions( void )
  {
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute("at") );
  }
  void testHandlerThread( void )
  {
    sched.add(1,string("test"));
    sched.add(2,string("test more"));
    sched.add(3,string("quit"));
    clock.delay(4);

    SketchThread scheduler_thread(1);
    scheduler_thread.startCustom(Scheduler::handler_thread_main,&sched);
    timespec tv;
    tv.tv_sec = 0;
    tv.tv_nsec = 500L;
    nanosleep(&tv,NULL);
    scheduler_thread.waitToFinish();

    //cerr << global_logger;
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
