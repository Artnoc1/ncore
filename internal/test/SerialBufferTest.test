#include <cxxtest/TestSuite.h>

#include <SerialBuffer.h>
#include <Logger.h>

using namespace std;

class SerialBufferTestSuite: public CxxTest::TestSuite
{
  Logger log;
  SerialBuffer s;
  Dispatcher dispatch;
public:
  SerialBufferTestSuite(void): s(log) {}
  void setUp()
  {
    log.clear();
    dispatch.clear();
    dispatch.add(&s);
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( log.size(), 0 );
  }
  void testOutput( void )
  {
    s.put("test");

    TS_ASSERT_EQUALS( log.size(), 1 );
    TS_ASSERT( log.at(0).find("test") != string::npos );
  }
  void testChars( void )
  {
    s.put('t');
    s.put('e');
    s.put('s');
    s.put('t');
    s.put('\n');

    TS_ASSERT_EQUALS( log.size(), 1 );
    TS_ASSERT( log.at(0).find("test") != string::npos );
  }
  void testNoCR( void )
  {
    s.put('t');
    s.put('e');
    s.put('s');
    s.put('t');

    TS_ASSERT_EQUALS( log.size(), 0 );
  }
  void testAvailable( void )
  {
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSetInputBuffer( void )
  {
    s.setInput(string("hi"));
    
    TS_ASSERT_EQUALS( s.available(), true );
    TS_ASSERT_EQUALS( s.get(), 'h' );
    TS_ASSERT_EQUALS( s.get(), 'i' );
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSendCommandNew( void )
  {
    bool ok = dispatch.execute_new(Parser("send hi"));
   
    TS_ASSERT_EQUALS( ok, true );
    TS_ASSERT_EQUALS( s.available(), true );
    TS_ASSERT_EQUALS( s.get(), 'h' );
    TS_ASSERT_EQUALS( s.get(), 'i' );
    TS_ASSERT_EQUALS( s.available(), false );
  }
  void testSendLongStringNew( void )
  {
    dispatch.execute_new(Parser("send this is a test of a really long test string, isn't it??"));
  
    ostringstream result;
    while ( s.available() )
      result << s.get();

    TS_ASSERT_EQUALS( result.str(), "this is a test of a really long test string, isn't it??" );
  }
  void testSendExceptions_New(void)
  {
    TS_ASSERT_THROWS_ANYTHING( dispatch.execute_new(Parser("send")) );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
