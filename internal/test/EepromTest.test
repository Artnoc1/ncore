#include <string>

#include <cxxtest/TestSuite.h>
#include <Eeprom.h>
#include <Logger.h>

using namespace std;

extern ostream& operator<<(ostream& os, const Logger& log);

class EepromTestSuite: public CxxTest::TestSuite
{
  Eeprom ee;
  Logger log;
public:
  EepromTestSuite(void): ee(log)
  {
  }
  void setUp()
  {
    log.clear();
  }

  void testEmpty( void )
  {
    TS_ASSERT( ee.size() > 0 );
  }
  void testReadWriteByte( void )
  {
    ee.writeByte(1,128);
    TS_ASSERT_EQUALS( ee.readByte(1), 128 );
  }
  void testReadWriteString( void )
  {
    string test = "This is a test of writing stuff to EEPROM.";
    int addr = 100;

    // Write a string out
    string::const_iterator it = test.begin();
    while (it != test.end())
    {
      ee.writeByte(addr++,*it++);
    }
    ee.writeByte(addr,0);

    // Read a string back
    string result;
    addr = 100;
    char c = ee.readByte(addr++);
    while (c)
    {
      result.push_back(c);
      c = ee.readByte(addr++);
    }

    TS_ASSERT_EQUALS( test, result );
  }
  void todo_testWritePastEnd( void )
  {
  }
  void testLoggingWrites( void )
  {
    string test = "This is a test of writing stuff to EEPROM.";
    int addr = 100;

    // Write a string out
    string::const_iterator it = test.begin();
    while (it != test.end())
    {
      ee.writeByte(addr++,*it++);
    }

    TS_ASSERT_EQUALS( log.size(), test.size() );
  }
  void testLoggingReads( void )
  {
    int addr = 100;
    const int reads = 10;

    int n = reads;
    while(n--)
    {
      ee.readByte(addr++);
    }

    TS_ASSERT_EQUALS( log.size(), reads );
  }
  void testCommands( void )
  {
    // eeprom <addr> -- read one byte
    // eeprom <addr> len <len> -- read <len> bytes
    // eeprom <addr> write <xx> ... <xx> - write hex bytes to eeprom
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
