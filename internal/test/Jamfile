CXXTEST_DIR = $(HOME)/Source/cxxtest ;
CXXTEST_GEN = $(CXXTEST_DIR)/python/scripts/cxxtestgen --error-printer ;
CODE_DIR = .. ;
CORE_DIR = ../.. ;
HDRS = $(CXXTEST_DIR) $(PWD) $(CODE_DIR) $(CORE_DIR) ;
CORE_MODULES = $(CORE_DIR)/native_core.cpp ;
CODE_MODULES = [ GLOB $(CODE_DIR) : *.cpp ] ;
TEST_MODULES = [ GLOB $(PWD) : *.test ] ;
LINK = c++ ;
LOCATE_TARGET = out ;
LOCATE_SOURCE = out ;
CCFLAGS = -fprofile-arcs -ftest-coverage ;
C++FLAGS = $(CCFLAGS) ;
LINKFLAGS = -fprofile-arcs ;

rule TestSuite
{
  Depends $(<) : $(>) ;
  MakeLocate $(<) : $(LOCATE_SOURCE) ;
  Clean clean : $(<) ;
}

actions TestSuite
{
  $(CXXTEST_GEN) $(>) > $(<)
}

rule RunTest
{
  Depends $(<) : $(>) ;
  Clean clean : $(<) ;
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  Depends all : $(<) ;
}

actions RunTest
{
  $(RM) $(LOCATE_TARGET)/*.gcda
  $(>) | tee $(<)
}

rule Coverage 
{
  Depends $(<) : $(>) ;
  Depends $(<) : result ;
  MakeLocate $(<) : $(LOCATE_TARGET) ;
  Clean clean : $(<) ;
  Clean clean : $(2:D=).gcov ;
}

actions ignore Coverage 
{
  gcov $(>) -o $(LOCATE_TARGET)/ > $(<)
  $(MV) *.gcov $(LOCATE_TARGET)/
  grep "###" $(LOCATE_TARGET)/$(CODE_MODULES:D=).gcov
}

rule Objects
{
        local _i ;

        for _i in [ FGristFiles $(<) ]
        {
                Object $(_i:B)$(SUFOBJ) : $(_i) ;
                Depends obj : $(_i:B)$(SUFOBJ) ;
        }
}
rule Main
{
        MainFromObjects $(<) : $(>:B)$(SUFOBJ) ;
        Objects $(>) ;
}

TestSuite runner.cpp : $(TEST_MODULES) ;
Main Tests : runner.cpp $(CODE_MODULES) $(CORE_MODULES) ;
RunTest result : Tests ;
Coverage coverage : $(CODE_MODULES) ;
