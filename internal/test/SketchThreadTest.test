#include <iterator>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <queue>

#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <cxxtest/TestSuite.h>

#include <Logger.h>
#include <SketchThread.h>
#include <OutputCapture.h>

using namespace std;

Logger global_logger;

extern ostream& operator<<(ostream& os, const Logger& log);
  
void custom_thread_main(void);

class SketchThreadTestSuite: public CxxTest::TestSuite
{
public:
  void setUp()
  {
    global_logger.clear();
  }
  void testThread( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    SketchThread t;
    t.waitToFinish();
    
    TS_ASSERT_EQUALS( global_logger.lines_contain("setup"), 1 );
    TS_ASSERT_EQUALS( global_logger.lines_contain("loop"), 10 );
    //cerr << ":OUT]" << endl;
  }
  void testCustom( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    SketchThread t(1);
    t.startCustom(custom_thread_main);
    t.waitToFinish();

    TS_ASSERT_EQUALS( global_logger.lines_contain("custom"), 5 );
    //cerr << ":OUT]" << endl;
  }
  void testExceptions1( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    TS_ASSERT_THROWS_ANYTHING( SketchThread(-1) );
    //cerr << ":OUT]" << endl;
  }
  void testExceptions2( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    TS_ASSERT_THROWS_ANYTHING( SketchThread(1).startCustom(NULL) );
    //cerr << ":OUT]" << endl;
  }
  void testExceptions3( void )
  {
    //cerr << "[IN:" << __FUNCTION__ ;
    SketchThread t(0);
    TS_ASSERT_THROWS_ANYTHING(t.startCustom(custom_thread_main); );
    t.waitToFinish(); 
    //cerr << ":OUT]" << endl;
  }
};

static volatile int i;

extern "C" void setup(void)
{
  i = 10;
  global_logger.add("setup");
}

extern "C" void loop(void)
{
  if (i--)
    global_logger.add("loop");
  else
    pthread_exit(NULL);
}

void custom_thread_main(void)
{
  int i=5;
  while(i--)
    global_logger.add("custom");
}

// vim:cin:ai:sts=2 sw=2 ft=cpp
