#include <cxxtest/TestSuite.h>
#include <Dispatcher.h>
#include <Parser.h>

using std::string;
using std::vector;

bool return_true(const vector<string>&)
{
  return true;
}

class DispatcherTestSuite: public CxxTest::TestSuite
{
  Parser parser;
  Dispatcher commands;
public:
  void setUp()
  {
    parser.clear();
    commands.clear();
  }

  void testEmptyBlank( void )
  {
    bool result = commands.execute(vector<string>());

    TS_ASSERT_EQUALS( result, false );
  }
  void testEmptyWithCommand( void )
  {
    parser.parse("test");
    bool result = commands.execute(parser);

    TS_ASSERT_EQUALS( result, false );
  }
  void testAddWorker( void )
  {
    bool ok = commands.add("cantfindme",return_true);

    TS_ASSERT_EQUALS( ok, true );
  }
  void testAddDuplicateWorker( void )
  {
    commands.add("cantfindme",return_true);
    bool ok = commands.add("cantfindme",return_true);

    TS_ASSERT_EQUALS( ok, false );
  }
  void testWorkerNotFound( void )
  {
    commands.add("cantfindme",return_true);

    parser.parse("test");
    bool result = Dispatcher().execute(parser);

    TS_ASSERT_EQUALS( result, false );
  }
  void testWorkerDispatchOk( void )
  {
    commands.add("test",return_true);

    parser.parse("test");
    bool result = commands.execute(parser);

    TS_ASSERT_EQUALS( result, true );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
